# .clinerules - AI 자율 모드 (단, 주요 시스템 변경은 사용자 승인 필요)
# 중요: 이 '.clinerules' 파일 자체는 AI가 인식할 수 있도록 반드시 프로젝트의 루트(최상위) 디렉토리에 위치해야 합니다.
#
# 이 파일은 AI에게 프로젝트 파일에 대한 완전한 자율적 수정 권한을 부여합니다.
# AI는 어떠한 사용자 확인이나 승인 절차 없이 모든 파일을 즉시 수정할 수 있습니다.
# 이로 인해 발생하는 모든 문제(데이터 유실, 파일 손상, 프로젝트 오작동 등)에 대한 책임은 전적으로 사용자에게 있습니다.
# 사용자는 Git과 같은 버전 관리 시스템을 통해 발생 가능한 모든 문제를 스스로 해결할 준비가 되어 있어야 합니다.
#
# 참고: 본 규칙 파일에 언급된 모든 문서 파일(예: .md, .toml)은 기본적으로 프로젝트 루트 내 'vibe-workflow/' 폴더에 위치하는 것을 기준으로 합니다.
# 만약 다른 경로를 사용한다면, 아래 규칙들의 파일 경로를 그에 맞게 수정해야 합니다.

# --- 최상위 원칙: AI의 자율적 행동 원칙 ---
# 이 섹션의 원칙은 모든 AI 행동의 기반이 됩니다.
- AI는 본 가이드라인 및 참고 파일에 명시된 내용을 바탕으로, 이 레포지토리의 목적(LLM 규약 및 워크플로우 설정)에 부합하는 범위 내에서 프로젝트의 파일(소스 코드, 설정 파일, 문서 등)을 자율적으로 추가, 수정, 삭제할 수 있다. 단, 아래 명시된 특정 유형의 작업에 대해서는 사용자 승인이 필요하다. 불필요한 파일 생성이나 사용자 승인 없는 외부 라이브러리/패키지 설치는 금지된다.
- 대부분의 파일 수정 작업(기존 파일 내용 변경, 레포지토리 목적에 맞는 단순 파일 추가/삭제 등 문서 중심의 변경)은 AI의 자율적 판단 하에 사용자에게 별도의 승인, 확인, 또는 변경 내용 제시를 요청하지 않고 즉시 실행된다.
- 다음의 작업 유형에 대해서는 AI가 실행 전, 해당 작업의 필요성과 예상되는 주요 변경 범위(예: 설치될 패키지 목록, 영향을 받는 주요 파일 등)를 사용자에게 명확히 알리고 명시적인 승인을 받은 후에만 실행한다:
    - 새로운 외부 라이브러리 또는 패키지의 설치 명령 실행.
    - 패키지 매니저(pnpm, uv 등)를 통한 주요 의존성의 추가, 삭제, 또는 버전의 대규모 변경 명령 실행.
    - 기타 시스템 환경에 큰 영향을 미치거나, 광범위한 파일 시스템 변경(예: 대량의 파일 자동 생성, 주요 디렉터리 구조 변경)을 초래할 것으로 AI 스스로 판단하는 작업.
- 사용자 승인이 필요한 작업은 승인 후 즉시 실행되며, 그 외 모든 자율적 작업 또한 AI의 판단에 따라 즉시 실행된다.

# --- 일반적인 프로젝트 상황 및 의사 결정 ---
# 목표: 'vibe-workflow/meeting_notes.toml' 파일을 항상 최신 상태로 유지하고, AI가 의사 결정의 근거로 적극 활용하도록 한다.
- AI는 'vibe-workflow/meeting_notes.toml'을 참고하여 과거 맥락을 파악하고, 사용자와의 대화에서 도출된 새로운 정보는 AI의 판단에 따라 실시간으로 해당 파일에 반영한다.

# --- 설계 및 요구사항 ---
# 목표: 설계 및 요구사항 관련 문서('vibe-workflow/requirements_definition.md', 'vibe-workflow/feature_specification.md', 'vibe-workflow/api_specification.yaml', 'vibe-workflow/database_schema.dbml', 'vibe-workflow/ui_guidelines.md')를 코드와 항상 동기화된 최신 상태로 유지한다.
- AI는 'vibe-workflow/requirements_definition.md' 및 'vibe-workflow/feature_specification.md'를 참고하고, 코드 변경이나 사용자와의 대화를 통해 요구사항 변경 사항 발생 시 AI의 판단에 따라 즉시 해당 문서를 수정한다.
- AI는 'vibe-workflow/api_specification.yaml'을 참고하고, API 관련 코드 변경(새로운 엔드포인트 추가, 기존 명세 수정 등)이나 사용자와의 관련 논의 시 AI의 판단에 따라 즉시 해당 문서를 수정한다.
- AI는 'vibe-workflow/database_schema.dbml' 파일을 참고하여 데이터베이스의 전체적인 구조, 각 테이블의 구성 요소(컬럼, 타입, 제약 조건 등) 및 관계를 파악한다. 데이터베이스 스키마 관련 코드 변경, 새로운 스키마 요소(테이블, 컬럼, 관계 등) 정의 또는 사용자와의 관련 논의가 발생하면, AI는 DBML 형식의 규칙에 맞게 'vibe-workflow/database_schema.dbml' 파일의 내용을 즉시 수정한다. 이때 AI는 해당 .dbml 파일이 엄격한 데이터베이스 실행 문법보다는 LLM이 스키마의 큰 그림과 의도를 이해하고 관련 코드를 생성하는 데 주요 참고 자료로 활용될 수 있도록 유지하는 데 중점을 둔다.
- AI는 'vibe-workflow/ui_guidelines.md'를 참고하고, UI/UX 관련 코드 변경이나 새로운 가이드라인 정의, 또는 사용자와의 관련 논의 시 AI의 판단에 따라 즉시 해당 문서를 수정한다.

# --- 코딩 표준 및 컨벤션 ---
# 목표: 'vibe-workflow/coding_conventions.md'에 정의된 코딩 표준을 모든 코드에 일관되게 적용하고, 필요시 컨벤션 문서 자체도 개선한다.
- AI는 'vibe-workflow/coding_conventions.md'를 참고하여 모든 코드를 생성 및 수정하며, 이 규칙을 엄격히 따른다.
- AI는 기존 코드가 컨벤션에 맞지 않다고 판단되거나, 더 나은 컨벤션이 필요하다고 사용자와의 대화를 통해 판단될 경우, AI의 판단에 따라 'vibe-workflow/coding_conventions.md' 파일 자체를 자율적으로 개선/수정할 수 있다.

# --- 프로젝트 구조 및 파일 관리 ---
# 목표: 'vibe-workflow/project_structure.toml' 파일을 통해 프로젝트의 현재 파일 구조를 정확하게 반영하고, AI가 이를 바탕으로 작업을 수행하도록 한다.
- AI는 'vibe-workflow/project_structure.toml'을 참고하여 프로젝트의 디렉토리 구조와 각 부분의 역할을 파악한다.
- 코드 구조 변경(파일 추가/삭제/이동)이 발생하면, AI는 자율적으로 'vibe-workflow/project_structure.toml' 파일에 해당 변경사항을 즉시 기록 및 업데이트한다.
- `project_structure.toml` 파일에는 LLM이 프로젝트의 전체적인 구조와 주요 파일의 역할을 이해하는 데 필요한 핵심 정보만 포함해야 한다. `node_modules`, `dist`, `build`와 같이 빌드 또는 의존성 관리 시스템에 의해 생성되는 대량의 파일이나 폴더, 또는 LLM의 작업에 직접적인 영향을 주지 않는 임시 파일 등은 포함하지 않는다. 이는 컨텍스트 낭비를 방지하고, `project_structure.toml`의 가독성과 효율성을 유지하기 위함이다.

# --- 프로젝트 설정 및 환경 ---
# (주의: 이 섹션의 규칙에 따른 의존성 변경 작업은 상위의 "최상위 원칙"에 명시된 사용자 승인 절차를 따릅니다.)
# 목표: 프로젝트 설정 파일들('package.json', 'pyproject.toml', 'requirements.txt', 'vibe-workflow/.env.example', 'vibe-workflow/configuration_guide.md' 등)을 최신 상태로 유지한다.
# (주의: 'package.json', 'pyproject.toml', 'requirements.txt' 등은 일반적으로 프로젝트 루트에 위치하므로 경로는 그대로 둡니다. 문서 성격의 파일만 'vibe-workflow/'로 예시합니다.)
- AI는 의존성 관리 파일('package.json', 'pyproject.toml', 'requirements.txt' 등 프로젝트의 실제 사용 방식에 따름)을 참고하고, 새로운 라이브러리 설치나 버전 변경 등 의존성 변경이 필요하다고 판단될 경우, (최상위 원칙에 따른 사용자 승인 후) 즉시 해당 파일을 수정하거나 관련 명령을 실행한다.
- AI는 설정 가이드 파일('vibe-workflow/.env.example', 'vibe-workflow/configuration_guide.md')을 참고하고, 설정 관련 변경(새로운 설정 추가, 기존 설정 설명 변경 등)이나 사용자와의 관련 논의 시 AI의 판단에 따라 즉시 해당 문서를 수정한다. (주의: 실제 비밀값이 담긴 '.env' 파일 등은 AI가 직접 수정하지 않도록 사용자가 각별히 주의하고 별도로 관리해야 한다. 이 규칙은 예시 파일이나 가이드 문서에 한정된다.)

# --- 테스트 및 배포 ---
# (주의: 이 섹션의 규칙에 따른 배포 관련 파일 변경 작업 중 시스템 환경에 큰 영향을 줄 수 있는 경우, 상위의 "최상위 원칙"에 명시된 사용자 승인 절차를 고려합니다.)
# 목표: 테스트 코드 및 관련 문서('vibe-workflow/test_case_template.md' 등), 배포 관련 파일('Dockerfile', 'docker-compose.yml', 'deploy_script.sh' 등)을 최신 상태로 유지하고, 코드 변경 시 자동으로 관련 작업을 수행한다.
# (주의: 'Dockerfile', 'docker-compose.yml' 등은 일반적으로 프로젝트 루트에 위치하므로 경로는 그대로 둡니다. 문서 성격의 파일만 'vibe-workflow/'로 예시합니다.)
- AI는 테스트 관련 문서('vibe-workflow/test_case_template.md' 및 기존 테스트 코드 패턴)를 참고하여 새로운 기능 추가나 코드 변경 시 자율적으로 테스트 코드를 작성하고, 필요시 관련 문서를 AI의 판단에 따라 수정한다.
- AI는 배포 관련 파일('Dockerfile', 'docker-compose.yml', 'deploy_script.sh')을 참고하고, 배포 환경 변경이나 관련 설정 수정 필요시, (필요한 경우 최상위 원칙에 따른 사용자 승인 후) 또는 사용자와의 관련 논의 시 AI의 판단에 따라 즉시 해당 파일을 수정한다.

# --- AI 행동 및 결과물 형식 ---
# 목표: AI는 사용자의 개입을 최소화하며, 자율적이고 효율적으로 작업을 수행한다.
- AI는 새로운 것을 제안하기 전에 기존 프로젝트 유틸리티나 라이브러리에 사용된 것을 확인한다.
- AI는 사용자와의 대화에서 요청이 모호하거나 세부 정보가 부족하다고 판단되면, (최상위 원칙에서 명시한 승인 필요 작업을 제외하고) 추가 정보를 요청하지 않고 가장 합리적이라고 판단되는 방향으로 자율적으로 작업을 수행한다.
- AI는 작업의 근거가 된 참고 문서나 규칙을 사용자에게 별도로 명시하지 않아도 된다. 모든 작업은 AI의 자율적 판단에 따른다.

# --- 주요 파일별 AI 행동 지침 요약 ---
# 이 섹션은 AI가 프로젝트의 주요 파일을 다룰 때 참고해야 할 핵심 행동 지침을 요약한 것입니다.
# 각 파일의 역할과 AI의 상호작용 방식을 명확히 하여 일관되고 효율적인 자율 작업을 지원합니다.

# vibe-workflow/api_specification.yaml
# 역할: API 명세 정의 및 최신 상태 유지
- 새로운 API 엔드포인트가 코드에 추가되거나 기존 엔드포인트의 요청/응답 구조, 인증 방식 등이 변경될 때 즉시 업데이트합니다.
- 사용자와 API 설계 관련 논의가 이루어져 변경 사항이 확정되면 해당 내용을 반영합니다.
- OpenAPI (Swagger) 등 표준 YAML 형식을 사용하여 API 명세를 명확하고 일관되게 기술합니다.
- 프론트엔드 또는 다른 백엔드 서비스와의 연동 시 정확한 계약(contract) 기준으로 활용합니다.

# vibe-workflow/coding_conventions.md
# 역할: 코딩 표준 및 컨벤션 정의, 관리, 개선
- 모든 새로운 코드 작성 및 기존 코드 수정 시, 이 문서에 정의된 코딩 표준과 컨벤션을 엄격히 준수합니다.
- 기존 코드가 컨벤션에 어긋나거나, 사용자와의 논의 또는 AI 자체 판단으로 더 나은 컨벤션이 도출되면 이 문서를 자율적으로 개선/수정합니다.
- 변수명, 함수 구조, 주석 스타일, 에러 처리 방식 등 일관된 코드 스타일 유지를 위한 기준으로 삼습니다.
- 새로운 기술 스택이나 라이브러리 도입 시, 관련 코딩 컨벤션을 이 문서에 추가/업데이트합니다.

# vibe-workflow/configuration_guide.md
# 역할: 프로젝트 설정 방법 및 환경 변수 상세 안내
- 프로젝트 설정 방법, 주요 설정 항목의 의미 및 사용법, 환경 변수 설정 가이드 등을 상세히 기술합니다.
- 새로운 설정 옵션이 추가되거나 기존 설정 방식이 변경될 때, 또는 사용자와의 관련 논의 시 즉시 업데이트합니다.
- 개발자가 프로젝트를 이해하고 환경을 구성하는 데 필요한 모든 설정 관련 정보를 중앙에서 관리하는 문서로 활용합니다.
- `.env.example` 파일 (만약 존재한다면)과 함께 참조되며, 환경 변수들에 대한 구체적인 설명과 사용 사례를 제공합니다.

# vibe-workflow/database_schema.dbml
# 역할: 데이터베이스 스키마 정의 및 LLM 참고 자료
- 데이터베이스 관련 코드(모델, 마이그레이션 등) 변경, 새로운 테이블/컬럼/관계 정의 시 DBML 형식에 맞춰 즉시 수정합니다.
- 테이블 구조, 컬럼 속성, 인덱스, 테이블 간의 관계 등을 명확하게 표현합니다.
- 실제 실행 가능한 SQL 문법보다는 LLM이 데이터베이스의 전체 구조와 의도를 파악하기 위한 참고 자료로 유지하는 데 중점을 둡니다.
- 데이터 관련 로직을 코딩하거나 수정할 때 이 스키마를 기준으로 데이터 흐름과 구조를 이해합니다.

# vibe-workflow/feature_specification.md
# 역할: 개별 기능 상세 명세 관리
- 개별 기능의 상세 동작 방식, 사용자 시나리오, 입출력 데이터, UI/UX 상세 등을 구체적으로 명세합니다.
- 코드 변경이나 사용자와의 대화를 통해 특정 기능의 사양이 변경되거나 새로운 기능이 구체화될 경우 즉시 수정합니다.
- `requirements_definition.md`의 상위 요구사항을 바탕으로 각 기능의 세부 구현 지침을 제공하는 문서로 활용합니다.
- 기능 개발 및 테스트 시, 이 문서에 기술된 사양을 기준으로 정확성 및 완전성을 검증합니다.

# vibe-workflow/meeting_notes.toml
# 역할: 대화 맥락 기록 및 의사결정 근거
- 사용자와의 대화에서 도출된 주요 결정 사항, 새로운 아이디어, 변경된 맥락 등을 실시간으로 기록/업데이트합니다.
- 과거 대화의 맥락 및 프로젝트 히스토리를 파악하기 위한 주요 참고 자료로 활용합니다.
- 새로운 작업을 시작하거나 의사결정을 내릴 때, 이 파일의 내용을 우선적으로 검토하여 일관성을 유지합니다.
- 정보는 간결하고 구조화된 TOML 형식으로 저장하여 AI가 쉽게 파싱하고 이해할 수 있도록 합니다.

# vibe-workflow/project_structure.toml
# 역할: 프로젝트 파일 및 디렉터리 구조 정의
- 프로젝트 내 주요 디렉터리 및 파일들의 역할과 목적, 그리고 그들 간의 관계를 기술합니다.
- 코드 리팩토링, 모듈 분리, 파일/디렉터리 추가, 삭제, 이동 등 프로젝트 구조에 변경이 발생하면 즉시 업데이트합니다.
- AI가 프로젝트의 전반적인 아키텍처와 파일 구성을 이해하고 일관된 패턴으로 파일을 관리하는 데 기준으로 활용합니다.
- 새로운 파일을 생성하거나 기존 파일의 위치를 결정할 때, 이 문서에 정의된 구조적 가이드라인을 따릅니다.

# vibe-workflow/requirements_definition.md
# 역할: 프로젝트 요구사항 정의 및 관리
- 사용자와의 대화 또는 코드 변경을 통해 새로운 요구사항이나 변경점이 발생했다고 판단될 경우 즉시 수정합니다.
- 현재 구현된 기능 및 향후 개발될 기능의 기반이 되는 공식적인 요구사항 정의서로 간주합니다.
- 코드베이스의 기능과 이 문서의 내용 간에 불일치가 없도록 항상 최신 상태를 유지합니다.
- 새로운 기능을 설계하거나 기존 기능을 수정할 때, 이 문서의 요구사항을 최우선 기준으로 삼습니다.

# vibe-workflow/test_case_template.md
# 역할: 테스트 케이스 작성 표준 및 템플릿 제공
- 새로운 테스트 케이스 작성 시 따라야 할 표준 형식, 필수 포함 항목, 작성 스타일 등을 정의합니다.
- 새로운 기능이 추가되거나 기존 기능이 변경될 때, 이 템플릿과 기존 테스트 코드 패턴을 참고하여 자율적으로 테스트 코드를 작성합니다.
- 테스트 코드의 일관성과 품질을 유지하고, 테스트 커버리지를 높이기 위한 가이드로 활용합니다.
- 더 효과적인 테스트 케이스 구조나 내용이 필요하다고 판단되거나, 사용자와의 논의를 통해 개선점이 도출되면 AI가 이 템플릿 문서를 자율적으로 수정할 수 있습니다.

# vibe-workflow/ui_guidelines.md
# 역할: UI/UX 디자인 원칙 및 가이드라인 관리
- 프로젝트의 전체적인 UI 디자인 원칙, 컴포넌트 스타일, 레이아웃 규격, 사용자 인터랙션 패턴 등을 상세히 기술합니다.
- UI/UX 관련 코드가 변경되거나, 새로운 디자인 가이드라인이 정의되거나, 사용자와 관련 논의가 있을 경우 즉시 수정합니다.
- 모든 UI 개발 시 일관된 사용자 경험과 디자인 품질을 보장하기 위한 핵심 기준으로 활용합니다.
- 새로운 UI 컴포넌트를 설계하거나 기존 UI를 개선할 때, 이 문서에 명시된 가이드라인을 준수합니다.
